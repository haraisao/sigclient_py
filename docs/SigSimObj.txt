API List
===========
------------------------------------------------------------
sig.SigSimObj
-------------------
Descriptions
^^^^^^^^^^^^^^
  This class is an interfece of the agent(e.g. robot or human) in the server.

Supers
^^^^^^^
   None

Variables
^^^^^^^^^^
    cmdbuf = sigcomm.SigDataCommand()
    name=name
    parts = {}
    attributes = {}
    joints={}
    updateTime=0.0
    controller = ctrl

Methods
^^^^^^^^
* __init__( name, ctrl):
   Contructor...

* getObj():
   This function is equivalent to SigController.getObj().
   May not need any more.

* setAttributes( data ):
   Parse bytecoded data and set attributes.

* getName():
   return own name

* setParts( data ):
   Parse bytecoded data and set Parts...

* getParts( name):
   return named parts object.

* dynamics():
   return 'dynamics' property is set or not

* getPosition():
   get current position from the server  
   return current position.

* setCurrentPosition( x, y, z):
   set current position attribute to (x, y, z) but doesn't send it to the server

* setPosition( x, y, z):
   set current position attribute to (x, y, z) and send it to the server

* updatePosition():
   get current position from the server and set the position attribute

* setCurrentRotation( qw, qx, qy, qz):
   set current rotation attribute to (qw, qx, qy, qz) but doesn't send it to the server

* x(val=None):
  set or get 'x' of the position

* y(val=None):
  set or get 'y' of the position

* z(val=None):
  set or get 'z' of the position

* getRotation():
   get current rotation from the server  
   return current rotation.

* setRotation(qw, qx, qy, qz, abs=1):
   set current rotation attribute to (qw, qx, qy, qz) and send it to the server

* setAxisAndAngle(x, y, z, ang, direct=1):
   if 'dynamics' property is FALSE, rotate the entity.

* updateRotation():
   get current rotation from the server  

* qw(val=None):
  set or get 'qw' of the rotation

* qx(val=None):
  set or get 'qx' of the rotation

* qy(val=None):
  set or get 'qy' of the rotation

* qz(val=None):
  set or get 'qz' of the rotation

* setForce(fx, fy, fz):
   if 'dynamics' property is FALSE, set force to the entity.

* addForce(dfx, dfy, dfz):
   add force parameter

* addForceAtPos(fx, fy, fz, px, py, pz)

* addForceAtRelPos(fx, fy, fz, px, py, pz)

* addForceToParts(parts, fx, fy, fz)

* addRelForce( fx, fy, fz)

* addRelForceAtPos(fx, fy, fz, px, py, pz)

* addRelForceAtRelPos(fx, fy, fz, px, py, pz)

* getMass():
   return 'mass' property

* setMass(val):
   set 'mass' property to VAL

* setAccel(ax, ay, az):
   if 'dynamics' property is FALSE, set acceleration to the entity.

* setTorque(x, y, z):
   if 'dynamics' property is FALSE, set torque properties

* setJointAngle(joint_name, angle):
   set joint angle

* setJointQuaternion(joint_name, qw, qx, qy, qz, offset=0):
   set joint angle with quaternion.

* addJointTorque(joint_name, torque):
   add torque to the joint

* setJointVelocity(joint_name, vel, mx):
   set velocity to the joint

* setAngularVelocityToJoint(joint_name, vel, mx):
   set angular velocity to the joint

* setAngularVelocityToParts( name, vel, maxf) :
   set angular velocity to the named part

* getAllJointAngles():
   get all joint angles 

* getCamFOV(camID=1):
   get FOV value of mounted camera

* getCamAS(camID=1):
   get AspectRatio value of mounted camera

* setCamFOV(fov, camID=1)

* setCamAS(as, camID=1)

* getAngularVelocity(Vector3d &vec)

* getCameraIDs()

* getCameraNum()

* getCameraViewPoint(camID=1)

* setCameraViewPoint(v, camID=1)

* getCameraLinkName(camID=1)

* getCamLink(camID=1)

* setCamLink(lnk, camID=1)

* getCamQuaternion(camID=1)

* getCameraViewVector(camID=1)

* setCameraViewVector(v, camID=1)

* isAttr(name)

* getCamDir(camID=1, requestToServer=True)

* setCamDir(v, camID=1)

* getCamPos(camID=1, requestToServer=true)

* setCamPos(pos, camID=1)


* getDynamicsMode()

* setDynamicsMode(bool dynamics)

* getGravityMode()

* setGravityMode(bool gravity)

* getIsGrasped()

* getJointAngle(jointName)

* getJointPosition(jointName)

* setCollisionEnable(flag)

* setAngularVelocity(x, y, z)

* getPartsPosition(partsName)

* getPointingVector(joint1, joint2) 

* getPointingVectorWithArm(lrFlag=0)

* getPointedObject(speakerName, lrFlag, lineID, typicalType=1) -- not tested

* getLinearVelocity()

* setLinearVelocity( vx, vy, vz)

============================= Not Implemented....
* attrs() 
* checkAttrs()
* classname()
* copy(const SimObj &o)
* free_()
* getAttr(const char *name) const 
* getFile(int num)
* id() const 
* isAttached() const 
* name() const 
* push(Attribute *attr)
* push(CParts *p)
* setRequestSener(RequestSender *s)
* getMainParts()
* setAttrValue(const char *name, const char *v)
* setAttrValue(const char *name, const Value &v)
* toBinary(int &n)
* getPartsIterator()
* getPointingVector(Vector3d &vec, int lrFlag=0) -->
         getPointingVectorWithArm(Vector3d &vec, int lrFlag=0) 

* getJointForce(const char *jointName, JointForce &jf1, JointForce &jf2)
